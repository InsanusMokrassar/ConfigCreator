File templatesFolder = new File("$rootProject.projectDir.absolutePath${File.separatorChar}gradle${File.separatorChar}templates")

Map properties = new HashMap<String, String>()

if (templatesFolder.exists() && templatesFolder.isDirectory()) {
    templatesFolder.listFiles().each {
        properties[it.name - ".gradle"] = it.absolutePath
    }
}

properties["projectByName"] = { name ->
    for (subproject in rootProject.subprojects) {
        if (subproject.name == name) {
            return subproject
        }
    }
    return null
}

properties["internalProject"] = { name ->
    projectByName("$name")
}

def ksp_generators = new ArrayList()
ksp_generators.add(libs.microutils.koin.generator)
ksp_generators.add(libs.microutils.ksp.sealed.generator)
ksp_generators.add(libs.microutils.ksp.classcasts.generator)
properties["ksp_generators"] = ksp_generators

def enableKspForTarget = { target, it ->
    it.dependencies {
        ksp_generators.forEach {
            add(target, it)
        }
    }
}

properties["enableKspForCommon"] = {
    enableKspForTarget("kspCommonMainMetadata", it)
}

properties["enableKspForJs"] = {
    enableKspForTarget("kspJs", it)
}

properties["enableKspForJvm"] = {
    enableKspForTarget("kspJvm", it)
}

properties["enableKspForAndroid"] = {
    enableKspForTarget("kspAndroid", it)
}

allprojects {
    ext {
        releaseMode = (project.hasProperty('RELEASE_MODE') && project.property('RELEASE_MODE') == "true") || System.getenv('RELEASE_MODE') == "true"

        properties.forEach { k, v ->
            it[k] = v
        }
    }
}
